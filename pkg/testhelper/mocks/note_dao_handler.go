// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"

	"notes-api/pkg/models"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// NoteDaoHandler is an autogenerated mock type for the NoteDaoHandler type
type NoteDaoHandler struct {
	mock.Mock
}

// CreateNote provides a mock function with given fields: ctx, note
func (_m *NoteDaoHandler) CreateNote(ctx context.Context, note models.Note) error {
	ret := _m.Called(ctx, note)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Note) error); ok {
		r0 = rf(ctx, note)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteNote provides a mock function with given fields: ctx, filter
func (_m *NoteDaoHandler) DeleteNote(ctx context.Context, filter map[string]interface{}) error {
	ret := _m.Called(ctx, filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) error); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNotes provides a mock function with given fields: ctx, filter
func (_m *NoteDaoHandler) GetNotes(ctx context.Context, filter map[string]interface{}) ([]models.Note, error) {
	ret := _m.Called(ctx, filter)

	var r0 []models.Note
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}) []models.Note); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *NoteDaoHandler) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNote provides a mock function with given fields: ctx, filter, updates
func (_m *NoteDaoHandler) UpdateNote(ctx context.Context, filter map[string]interface{}, updates primitive.M) error {
	ret := _m.Called(ctx, filter, updates)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, primitive.M) error); ok {
		r0 = rf(ctx, filter, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
