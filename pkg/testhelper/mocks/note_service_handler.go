// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	"context"
	"notes-api/pkg/models"

	"github.com/stretchr/testify/mock"
)

// NoteServiceHandler is an autogenerated mock type for the NoteServiceHandler type
type NoteServiceHandler struct {
	mock.Mock
}

// CreateNote provides a mock function with given fields: ctx, noteRequest
func (_m *NoteServiceHandler) CreateNote(ctx context.Context, noteRequest models.NoteRequest) (string, error) {
	ret := _m.Called(ctx, noteRequest)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, models.NoteRequest) string); ok {
		r0 = rf(ctx, noteRequest)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.NoteRequest) error); ok {
		r1 = rf(ctx, noteRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNote provides a mock function with given fields: ctx, id
func (_m *NoteServiceHandler) DeleteNote(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetNotes provides a mock function with given fields: ctx, id
func (_m *NoteServiceHandler) GetNotes(ctx context.Context, id string) ([]models.Note, error) {
	ret := _m.Called(ctx, id)

	var r0 []models.Note
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Note); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Note)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields: ctx
func (_m *NoteServiceHandler) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendToContentService provides a mock function with given fields: ctx, id
func (_m *NoteServiceHandler) SendToContentService(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetToken provides a mock function with given fields: token
func (_m *NoteServiceHandler) SetToken(token string) {
	_m.Called(token)
}

// UpdateNote provides a mock function with given fields: ctx, id, noteRequest
func (_m *NoteServiceHandler) UpdateNote(ctx context.Context, id string, noteRequest models.NoteRequest) error {
	ret := _m.Called(ctx, id, noteRequest)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NoteRequest) error); ok {
		r0 = rf(ctx, id, noteRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateToken provides a mock function with given fields: ctx, token
func (_m *NoteServiceHandler) ValidateToken(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
